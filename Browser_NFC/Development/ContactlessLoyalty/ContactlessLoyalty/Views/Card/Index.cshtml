@model ContactlessLoyalty.Data.Card
@{
    ViewData["Title"] = "Index";
    Layout = "/Views/Shared/_Layout.cshtml";
}
@using Microsoft.AspNetCore.Identity
@using ContactlessLoyalty.Enumeration
@inject SignInManager<AccountContactlessLoyaltyUser> SignInManager
@inject UserManager<AccountContactlessLoyaltyUser> UserManager

    <div class="body-content">
        <h1>Hi @Model.User.FirstName @Model.User.LastName!</h1>
        <h3>This is the loyalty card for: </h3>
        <h5>@Model.StoreName</h5>

        @if (!ViewData.ModelState.IsValid)
        {
        <span class="text-danger">Collection attempted on invalid time. <br />Check loyalty scheme stamp collection condition.</span>
        }

        @for (int i = 0; i < Model.NumberOfStamps; i++)
        {
        <div class="col-xs-4 stampIcon">
            <img class="buttonTopMargin" src="~/images/coffeeStamp.svg" alt="" id="stampCollected-@i" onclick="readFromImageClick('@i')" />
        </div>
        }

        @for (int i = 0; i < (int)SchemeLimit.WembleyEmporium - Model.NumberOfStamps; i++)
        {
        <div class="col-xs-4 stampIcon">
            <img class="buttonTopMargin" style="margin-top:20px" src="~/images/coffeeIcon.svg" alt="" id="stampToCollect-@i" onclick="readFromImageClick('@i')" />
        </div>
        }

        <br />

        @if (Model.NumberOfStamps >= (int)SchemeLimit.WembleyEmporium)
        {
        <div>
            <input class="btn btn-default btn-shadow buttonTopMargin" type="button" value="Receive your digital Voucher by SMS!" onclick="location.href='@Url.Action("ResetStamp", "Card")'"/>
        </div>
        }
        else
        {
        <div>
            <input class="btn btn-default btn-shadow buttonTopMargin" type="button" value="Start scanning" onclick="startNFC()"/>
        </div>
        <p class="buttonTopMargin">If you don't see an icon shaking after clicking <b>Start scanning</b> it means your device does not support the feature yet.<br />
        Please use the <b>Mock Collection</b> button instead.</p>
        <div>
            <input class="btn btn-default btn-shadow col-sm-3 buttonTopMargin" type="button" value="Stop shaking" onclick="disableIcon()"/>
        </div>
        }
        <br />
        <form asp-action="CollectStamp" asp-controller="Card" method="post" id="hiddenForm">
            @Html.AntiForgeryToken()
            <input asp-for="StoreSchemeCode" class="form-control" type="hidden" value="A value" id="uniqueStoreCode" />
            <input type="submit" value="Mock Collection" class="btn btn-default btn-shadow" />
        </form>
    </div>

<script>
    //var device = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(navigator.userAgent.toLowerCase()));
    //console.log(device);

    //var mytest = i.test('Android' + 'Chrome/[.0-9]* Mobile');
    //console.log("This is valid mobile chrome = " + mytest);
    //console.log(navigator.userAgent.toLowerCase());

    var iconToShake = document.getElementById("stampToCollect-0");

    async function startNFC() {
        try {
            const reader = new NDEFReader();

            await reader.scan();
            activateIcon();
            console.log("> Scan started");

            //alert('First alert attempt');
            reader.addEventListener("error", (event) => {
                alert("No valid NFC feature. " + event.message);
            });

            reader.addEventListener("reading", ({ message, serialNumber }) => {
                console.log("serial number = " + serialNumber);
                var text = "";
                const decoder = new TextDecoder();
                var newLine = "\n";

                for (const record of message.records) {
                    switch (record.recordType) {
                        case "empty":
                            text += newLine + "(empty case)";
                            document.getElementById("uniqueStoreCode").value = "NFC_TagEmpty";
                            document.getElementById("hiddenForm").submit(); // Test to see if demo can be made with other cards
                            break;
                        case "text":
                            text += newLine + decoder.decode(record.data) + "(text case)";
                            break;
                        case "url":
                            text += newLine + decoder.decode(record.data) + "URL case";
                            break;
                        case "smart-poster":
                            text += newLine + decoder.decode(record.data) + "(smart poster case)";
                            break;
                        case "absolute-url":
                            text += newLine + decoder.decode(record.data) + "(absolute URL)";
                            break;
                        case "mime":

                            if (record.mediaType === 'application/json') {
                                const json = JSON.parse(decoder.decode(record.data));
                                console.log(json);
                                text = decoder.decode(record.data);
                                // To display json object inside html page
                                var mainContainer = document.getElementById("jsonData");
                                //var div = document.createElement("div");
                                //div.innerHTML = "Name: " + json.name + " Position: " + json.position;
                                //mainContainer.appendChild(div);
                                @*console.log(document.getElementById("stamp-1"));
                                console.log("User phone number " + @Model.User.PhoneNumber)*@
                                //document.getElementById("jsonData").value = "Something Example";

                                document.getElementById("uniqueStoreCode").value = "NFC_Tag"; // Value to be taken from the NFC tag and passed to the back-end to be checked with the database

                                document.getElementById("hiddenForm").submit();
                            }
                            break;
                        case "unknown":
                            text += newLine + decoder.decode(record.data) + "(UNKNOWN)";
                        default:
                            text += newLine + "Something unexpected: " + record
                            break;
                    }
                }

                console.log(`> Serial Number: ${serialNumber}`);
                console.log(`> Records: (${message.records.length})`);

                //document.getElementById("jsonData").innerHTML = text;

            });
        } catch (error) {
            console.log("Argh! " + error);
        }
    }

    function activateIcon() {
        if (iconToShake != null) {
            iconToShake.classList.add("shakeIcon");
        }
    }

    function disableIcon() {
        if (iconToShake != null) {
            iconToShake.className = "buttonTopMargin";
        }
    }


    async function readFromImageClick(imageNumber) {
        console.log("User clicked icon " + imageNumber);
    }
</script>

@* Create a method to check if there NFC available on the phone to show an alert
    @if (!string.IsNullOrEmpty(Model.StoreName))
    {
        <script>alert("Welcome to @Model.StoreName");</script>
    }*@
