@model ContactlessLoyalty.Data.Card
@{
    ViewData["Title"] = "Index";
    Layout = "/Views/Shared/_Layout.cshtml";
}
@using Microsoft.AspNetCore.Identity
@using ContactlessLoyalty.Enumeration
@inject SignInManager<AccountContactlessLoyaltyUser> SignInManager
@inject UserManager<AccountContactlessLoyaltyUser> UserManager

<div class="body-content">
    <h1>Hi @Model.User.FirstName @Model.User.LastName!</h1>
    <h3>This is the loyalty card for: </h3>
    <h5>@Model.StoreName</h5>

    @if (!ViewData.ModelState.IsValid)
    {
    <span class="text-danger">Collection attempted on invalid time or scheme code scanned invalid. <br />Check loyalty scheme stamp collection condition.</span>
    }

    @for (int i = 0; i < Model.NumberOfStamps; i++)
    {
    <div class="col-xs-4 stampIcon">
        <img class="buttonTopMargin" src="~/images/coffeeStamp.svg" alt="" id="stampCollected-@i" onclick="readFromImageClick('@i')" />
    </div>
    }

    @for (int i = 0; i < (int)SchemeLimit.WembleyEmporium - Model.NumberOfStamps; i++)
    {
    <div class="col-xs-4 stampIcon">
        <img class="buttonTopMargin" style="margin-top:20px" src="~/images/coffeeIcon.svg" alt="" id="stampToCollect-@i" onclick="readFromImageClick('@i')" />
    </div>
    }

    <br />

    @if (Model.NumberOfStamps >= (int)SchemeLimit.WembleyEmporium)
    {
    <div>
        <input class="btn btn-default btn-shadow buttonTopMargin" type="button" value="Receive your digital Voucher by SMS!" onclick="location.href='@Url.Action("ResetStamp", "Card")'" />
    </div>
    }
    else
    {
    <div>
        <input class="btn btn-default btn-shadow buttonTopMargin" type="button" value="Start Scanning" onclick="startNFC()" />
    </div>
    <div>
        <input class="btn btn-default btn-shadow col-sm-3 buttonTopMargin" type="button" value="Stop Floating Coffee" onclick="disableIcon()" />
    </div>
    <p class="buttonTopMargin">
        If you don't see an icon moving around after clicking <b>Start Scanning</b> it means your device does not support the feature yet.<br />
        Please use the <b>Mock Collection</b> button below instead.
    </p>
    <br />
    <form asp-action="CollectStamp" asp-controller="Card" method="post" id="hiddenForm">
        @Html.AntiForgeryToken()
        <input name="StoreSchemeCode" class="form-control" type="hidden" value="DefaultValueStore" id="uniqueStoreCode" />
        <input name="TagSR" class="form-control" type="hidden" value="DefaultValueTag" id="tagSR" />
        <input type="submit" value="Mock Collection" class="btn btn-default btn-shadow" />
    </form>
    }
</div>

<script>
    //var device = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(navigator.userAgent.toLowerCase()));
    //console.log(device);

    //var mytest = i.test('Android' + 'Chrome/[.0-9]* Mobile');
    //console.log("This is valid mobile chrome = " + mytest);
    //console.log(navigator.userAgent.toLowerCase());

    var iconToFloat = document.getElementById("stampToCollect-0");

    async function startNFC() {
        try {
            const reader = new NDEFReader();

            await reader.scan();
            activateIcon();
            console.log("> Scan started");

            reader.addEventListener("error", (event) => {
                alert("No valid NFC feature. " + event.message);
            });

            reader.addEventListener("reading", ({ message, serialNumber }) => {
                console.log("serial number = " + serialNumber);
                //document.getElementById("tagSR").value = serialNumber;

                const decoder = new TextDecoder();

                for (const record of message.records) {
                    console.log(record.recordType);
                    switch (record.recordType) {
                        case "empty":
                            document.getElementById("uniqueStoreCode").value = "NFC_TagEmpty";
                            document.getElementById("tagSR").value = "NFC_EmptySR"; //Override for empty case
                            document.getElementById("hiddenForm").submit(); // Test to see if demo can be made with other cards
                            break;
                        case "mime":
                            if (record.mediaType === 'application/json') {
                                const json = JSON.parse(decoder.decode(record.data));
                                console.log(json);
                                document.getElementById("tagSR").value = serialNumber;
                                // Value to be taken from the NFC tag and passed to the back-end to be checked with the database
                                document.getElementById("uniqueStoreCode").value = json.schemeCode;
                                document.getElementById("hiddenForm").submit();
                            }
                            break;
                        default:
                            console.log("Something unexpected: " + record)
                            break;
                    }
                }
            });
        } catch (error) {
            console.log(error);
        }
    }

    function activateIcon() {
        if (iconToFloat != null) {
            iconToFloat.classList.add("iconFloatingEffect");
        }
    }

    function disableIcon() {
        if (iconToFloat != null) {
            iconToFloat.className = "buttonTopMargin";
        }
    }

    async function readFromImageClick(imageNumber) {
        console.log("User clicked icon " + imageNumber);
    }
</script>