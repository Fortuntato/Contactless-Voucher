@model ContactlessLoyalty.Data.Card
@{
    ViewData["Title"] = "Index";
    Layout = "/Views/Shared/_Layout.cshtml";
}
@using Microsoft.AspNetCore.Identity
@using ContactlessLoyalty.Enumeration
@inject SignInManager<AccountContactlessLoyaltyUser> SignInManager
@inject UserManager<AccountContactlessLoyaltyUser> UserManager

<div class="body-content">
    <h1>Hi @Model.User.FirstName !</h1>
    <h3>This is the loyalty card for: <br />  @Model.StoreName</h3>

    @for (int i = 0; i < Model.NumberOfStamps; i++)
    {
        <div class="col-xs-4 stampIcon">
            <img style="margin-top:20px" src="~/images/coffeeStamp.svg" alt="" id="stamp-@i" onclick="readFromImageClick('@i')" />
        </div>
    }

    @for (int i = 0; i < (int) SchemeLimit.WembleyEmporium - Model.NumberOfStamps; i++)
    {
        <div class="col-xs-4 stampIcon">
            <img style="margin-top:20px" src="~/images/coffeeIcon.svg" alt="" id="stamp-@i" onclick="readFromImageClick('@i')" />
        </div>
    }

    <br />

    @if (Model.NumberOfStamps >= (int)SchemeLimit.WembleyEmporium)
    {
        <div>
            <input class="btn btn-default btn-shadow" type="button" value="Receive your digital Voucher by SMS!" onclick="location.href='@Url.Action("ResetStamp", "Card")'" style="margin-top:20px" />
        </div>
    }
    else
    {
        <div>
            <input class="btn btn-default btn-shadow" type="button" value="Start scanning" onclick="startNFC()" style="margin-top:20px" />
        </div>
    }

</div>

@*<form asp-action="CollectStamp" asp-controller="Dashboard" method="post"  id="hiddenForm">
        @Html.AntiForgeryToken()
        <input asp-net-class="form-control" type="text" value="A value" id="uniqueStoreCode" />
        <input type="submit" value="Debug dashboard error" class="btn btn-default" />
    </form>*@

<form asp-action="CollectStamp" asp-controller="Card" method="post" id="hiddenForm">
    @Html.AntiForgeryToken()
    <input asp-for="StoreSchemeCode" class="form-control" type="hidden" value="A value" id="uniqueStoreCode" />
    <input type="submit" value="Debug dashboard error" class="btn btn-default" />
</form>

<script>

    //var device = (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(navigator.userAgent.toLowerCase()));
    //console.log(device);
    //console.log(navigator.userAgent.toLowerCase());

    async function startNFC() {
        try {
            const reader = new NDEFReader();
            //const controller = new AbortController();

            await reader.scan();

            console.log("> Scan started");
            //alert('First alert attempt');
            reader.addEventListener("error", (event) => {
                console.log(`Argh! ${event.message}`);
                 alert('No NFC for youu!');
                });


            //controller.signal.onabort = event => {
            //    console.log("We're done waiting for NDEF messages.");
            //};

            //// Stop listening to NDEF messages after 3s.
            //setTimeout(() => controller.abort(), 3000);

            reader.addEventListener("reading", ({ message, serialNumber }) => {
                console.log("serial number = " + serialNumber);
                var text = "";
                const decoder = new TextDecoder();
                var newLine = "\n";

                for (const record of message.records) {
                    switch (record.recordType) {
                        case "empty":
                            text += newLine + "(empty case)";
                            document.getElementById("hiddenForm").submit(); // Test to see if demo can be made with other cards
                            break;
                        case "text":
                            text += newLine + decoder.decode(record.data) + "(text case)";
                            break;
                        case "url":
                            text += newLine + decoder.decode(record.data) + "URL case";
                            break;
                        case "smart-poster":
                            text += newLine + decoder.decode(record.data) + "(smart poster case)";
                            break;
                        case "absolute-url":
                            text += newLine + decoder.decode(record.data) + "(absolute URL)";
                            break;
                        case "mime":

                            if (record.mediaType === 'application/json') {
                                const json = JSON.parse(decoder.decode(record.data));
                                console.log(json);
                                text = decoder.decode(record.data);
                                // To display json object inside html page
                                var mainContainer = document.getElementById("jsonData");
                                //var div = document.createElement("div");
                                //div.innerHTML = "Name: " + json.name + " Position: " + json.position;
                                //mainContainer.appendChild(div);
                                @*console.log(document.getElementById("stamp-1"));
                                console.log("User phone number " + @Model.User.PhoneNumber)*@
                                //document.getElementById("jsonData").value = "Something Example";


                                document.getElementById("uniqueStoreCode").value = "PAYIN"; // Value to be taken from the NFC tag and passed to the back-end to be checked with the database

                                document.getElementById("hiddenForm").submit();
                            }
                            break;
                        case "unknown":
                            text += newLine + decoder.decode(record.data) + "(UNKNOWN)";
                        default:
                            text += newLine + "Something unexpected: " + record
                            break;
                    }
                }

                console.log(`> Serial Number: ${serialNumber}`);
                console.log(`> Records: (${message.records.length})`);

                //document.getElementById("jsonData").innerHTML = text;

            });
        } catch (error) {
            console.log("Argh! " + error);
        }
    }

    async function readFromImageClick(imageNumber) {
        try {
            const reader = new NDEFReader();
            await reader.scan();
            console.log("> Scan started");
            //alert('First alert attempt');
            reader.addEventListener("error", (event) => {
                console.log(`Argh! ${event.message}`);
                 alert('No NFC for youu!');
                });

            reader.addEventListener("reading", ({ message, serialNumber }) => {

                var text = "";
                const decoder = new TextDecoder();
                var newLine = "\n";

                for (const record of message.records) {
                    switch (record.recordType) {
                        case "empty":
                            text += newLine + "(empty case)";
                            break;
                        case "text":
                            text += newLine + decoder.decode(record.data) + "(text case)";
                            break;
                        case "url":
                            text += newLine + decoder.decode(record.data) + "URL case";
                            break;
                        case "smart-poster":
                            text += newLine + decoder.decode(record.data) + "(smart poster case)";
                            break;
                        case "absolute-url":
                            text += newLine + decoder.decode(record.data) + "(absolute URL)";
                            break;
                        case "mime":

                            if (record.mediaType === 'application/json') {
                                const json = JSON.parse(decoder.decode(record.data));
                                console.log(json);
                                text = decoder.decode(record.data);
                                // To display json object inside html page
                                //var mainContainer = document.getElementById("jsonData");
                                //var div = document.createElement("div");
                                //div.innerHTML = "Name: " + json.name + " Position: " + json.position;
                                //mainContainer.appendChild(div);
                                console.log(document.getElementById("stamp-1"));
                                console.log("User phone number " + @Model.User.PhoneNumber)
                                document.getElementById("stamp-" + imageNumber).src = "@Url.Content("/images/banner1.svg")";
                                //document.getElementById("jsonData").value = "Something Example";


                                document.getElementById("uniqueStoreCode").value = "Forza Lazio!"; // Value to be taken from the NFC tag and passed to the back-end to be checked with the database

                                document.getElementById("hiddenForm").submit();
                            }
                            break;
                        case "unknown":
                            text += newLine + decoder.decode(record.data) + "(UNKNOWN)";
                        default:
                            text += newLine + "Something unexpected: " + record
                            break;
                    }
                }

                console.log(`> Serial Number: ${serialNumber}`);
                console.log(`> Records: (${message.records.length})`);

                //document.getElementById("jsonData").innerHTML = text;

            });
        } catch (error) {
            console.log("Argh! " + error);
        }
    }
</script>

@* Create a method to check if there NFC available on the phone to show an alert
    @if (!string.IsNullOrEmpty(Model.StoreName))
    {
        <script>alert("Welcome to @Model.StoreName");</script>
    }*@
