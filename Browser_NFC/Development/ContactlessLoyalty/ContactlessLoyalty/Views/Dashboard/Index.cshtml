@*@model IEnumerable<ContactlessLoyalty.Data.Dashboard>*@
@model ContactlessLoyalty.Data.Dashboard
@{
    ViewData["Title"] = "Index";
    Layout = "/Views/Shared/_Layout.cshtml";
}
@using Microsoft.AspNetCore.Identity
@inject SignInManager<AccountContactlessLoyaltyUser> SignInManager
@inject UserManager<AccountContactlessLoyaltyUser> UserManager

<h2>Index</h2>

<p>
    <a asp-action="Create">Create New</a>
</p>

@for (int i = 0; i < Model.NumberOfStamps; i++)
{
    <div class="col-xs-4 stampIcon">
        <img src="~/images/avataaars.svg" alt="" id="stamp-@i" onclick="readFunction()" />
    </div>
}

<script>
    var elements = document.getElementsByClassName("stampIcon");
    for (var i = 0; i < elements.length; i++) {
        elements[i].addEventListener("click", (event) => {

        });
    }

    async function readFunction() {
        try {
            const reader = new NDEFReader();
            await reader.scan();
            console.log("> Scan started");

            reader.addEventListener("error", (event) => {
                console.log(`Argh! ${event.message}`);
            });

            reader.addEventListener("reading", ({ message, serialNumber }) => {

                var text = "";
                const decoder = new TextDecoder();
                var newLine = "\n";

                for (const record of message.records) {
                    switch (record.recordType) {
                        case "empty":
                            text += newLine + "(empty case)";
                            break;
                        case "text":
                            text += newLine + decoder.decode(record.data) + "(text case)";
                            break;
                        case "url":
                            text += newLine + decoder.decode(record.data) + "URL case";
                            break;
                        case "smart-poster":
                            text += newLine + decoder.decode(record.data) + "(smart poster case)";
                            break;
                        case "absolute-url":
                            text += newLine + decoder.decode(record.data) + "(absolute URL)";
                            break;
                        case "mime":

                            if (record.mediaType === 'application/json') {
                                const json = JSON.parse(decoder.decode(record.data));
                                console.log(json);
                                text = decoder.decode(record.data);
                                // To display json object inside html page
                                var mainContainer = document.getElementById("jsonData");
                                //var div = document.createElement("div");
                                //div.innerHTML = "Name: " + json.name + " Position: " + json.position;
                                //mainContainer.appendChild(div);
                                console.log(document.getElementById("stamp-1"));
                                console.log("User phone number " + @Model.User.PhoneNumber)
                                document.getElementById("stamp-2").src = "https://image.flaticon.com/icons/svg/2935/2935679.svg";
                                //document.getElementById("jsonData").value = "Something Example";
                                
                            }
                            break;
                        case "unknown":
                            text += newLine + decoder.decode(record.data) + "(UNKNOWN)";
                        default:
                            text += newLine + "Something unexpected: " + record
                            break;
                    }
                }

                console.log(`> Serial Number: ${serialNumber}`);
                console.log(`> Records: (${message.records.length})`);

                //document.getElementById("jsonData").innerHTML = text;

            });
        } catch (error) {
            console.log("Argh! " + error);
        }
    }
</script>