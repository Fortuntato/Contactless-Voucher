@*@IndexModel;*@

@{
    ViewData["Title"] = "Home Page";
}
<div class="accountPage">

    <h1>This is the NFC Page</h1>

    <div class="container">
        <div class="row">
            <div class="col-xs-4 stampIcon" id="firstStamp">
                <img src="~/images/avataaars.svg" alt="" id="firstStamp1" onclick="readFunction()" />
            </div>
            <div class="col-xs-4 stampIcon" id="SecondStamp">
                <img src="~/images/avataaars.svg" alt="" id="firstStamp2" onclick="readFunction()"/>
            </div>
            <div class="col-xs-4 stampIcon" id="ThirdStamp">
                <img src="~/images/avataaars.svg" alt=""  onclick="readFunction()"/>
            </div>
        </div>
    </div>

    <input type="text" id="writeText" name="label" value="NFC"><br><br>

    <button id="scanButton" class="btn-shadow">Scan</button>
    <button id="writeButton" class="btn-shadow">Write</button>
    <br />

    <div id="jsonData"></div>

</div>
<script>

    function runNFC() {
        console.log("NFC Read On");
        new WebNFC(scan).read(read);
    }

    //jQuery("stampIcon").click(function() {
    //    var contentPanelId = jQuery(this).attr("id");
    //    console.log("id" + contentPanelId);
    //});

    var elements = document.getElementsByClassName("stampIcon");
    for (var i = 0; i < elements.length; i++) {
        elements[i].addEventListener("click", (event) => {

        });
    }

    async function readFunction() {
        try {
            const reader = new NDEFReader();
            await reader.scan();
            console.log("> Scan started");

            reader.addEventListener("error", (event) => {
                console.log(`Argh! ${event.message}`);
            });

            reader.addEventListener("reading", ({ message, serialNumber }) => {

                var text = "";
                const decoder = new TextDecoder();
                var newLine = "\n";

                for (const record of message.records) {
                    switch (record.recordType) {
                        case "empty":
                            text += newLine + "(empty case)";
                            break;
                        case "text":
                            text += newLine + decoder.decode(record.data) + "(text case)";
                            break;
                        case "url":
                            text += newLine + decoder.decode(record.data) + "URL case";
                            break;
                        case "smart-poster":
                            text += newLine + decoder.decode(record.data) + "(smart poster case)";
                            break;
                        case "absolute-url":
                            text += newLine + decoder.decode(record.data) + "(absolute URL)";
                            break;
                        case "mime":

                            if (record.mediaType === 'application/json') {
                                const json = JSON.parse(decoder.decode(record.data));
                                console.log(json);
                                text = decoder.decode(record.data);
                                // To display json object inside html page
                                var mainContainer = document.getElementById("jsonData");
                                var div = document.createElement("div");
                                div.innerHTML = "Name: " + json.name + " Position: " + json.position;
                                mainContainer.appendChild(div);

                            }
                            break;
                        case "unknown":
                            text += newLine + decoder.decode(record.data) + "(UNKNOWN)";
                        default:
                            text += newLine + "Something unexpected: " + record
                            break;
                    }
                }

                console.log(`> Serial Number: ${serialNumber}`);
                console.log(`> Records: (${message.records.length})`);
                document.getElementById("jsonData").innerHTML = text;



            });
        } catch (error) {
            console.log("Argh! " + error);
        }
    }


    scanButton.addEventListener("click", async () => {
        console.log("User clicked scan button");

        try {
            const reader = new NDEFReader();
            await reader.scan();
            console.log("> Scan started");

            reader.addEventListener("error", (event) => {
                console.log(`Argh! ${event.message}`);
            });



            reader.addEventListener("reading", ({ message, serialNumber }) => {

                var text = "";
                const decoder = new TextDecoder();
                var newLine = "\n";

                for (const record of message.records) {
                    switch (record.recordType) {
                        case "empty":
                            text += newLine + "(empty case)";
                            break;
                        case "text":
                            text += newLine + decoder.decode(record.data) + "(text case)";
                            break;
                        case "url":
                            text += newLine + decoder.decode(record.data) + "URL case";
                            break;
                        case "smart-poster":
                            text += newLine + decoder.decode(record.data) + "(smart poster case)";
                            break;
                        case "absolute-url":
                            text += newLine + decoder.decode(record.data) + "(absolute URL)";
                            break;
                        case "mime":

                            if (record.mediaType === 'application/json') {
                                const json = JSON.parse(decoder.decode(record.data));
                                console.log(json);
                                text = decoder.decode(record.data);
                                // To display json object inside html page
                                var mainContainer = document.getElementById("jsonData");
                                var div = document.createElement("div");
                                div.innerHTML = "Name: " + json.name + " Position: " + json.position;
                                mainContainer.appendChild(div);

                            }
                            break;
                        case "unknown":
                            text += newLine + decoder.decode(record.data) + "(UNKNOWN)";
                        default:
                            text += newLine + "Something unexpected: " + record
                            break;
                    }
                }

                console.log(`> Serial Number: ${serialNumber}`);
                console.log(`> Records: (${message.records.length})`);
                document.getElementById("jsonData").innerHTML = text;
            });
        } catch (error) {
            console.log("Argh! " + error);
        }
    });

    writeButton.addEventListener("click", async () => {
        console.log("User clicked write button");

        try {
            const writer = new NDEFWriter();
            const encoder = new TextEncoder();

            //var textToWrite = document.getElementById("writeText").value;
            //console.log("Writing:" + textToWrite);
            //await writer.write(textToWrite);

            writer.write({
                records: [
                    {
                        recordType: "mime",
                        mediaType: "application/json",
                        data: encoder.encode(JSON.stringify({
                            name: "Ciro Immobile",
                            position: "Striker"
                        }))
                    },
                    {
                        recordType: "mime",
                        mediaType: "application/json",
                        data: encoder.encode(JSON.stringify({
                            name: "Lucas Leiva",
                            position: "Midfielder"
                        }))
                    }]
            });

            console.log("> Message written");
        } catch (error) {
            console.log("Argh! " + error);
        }
    });
</script>
